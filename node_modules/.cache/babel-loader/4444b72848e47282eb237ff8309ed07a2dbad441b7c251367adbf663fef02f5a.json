{"ast":null,"code":"var _jsxFileName = \"/home/rahul/Desktop/manufac-assignment/src/components/wine.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WineStats = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(\"/data.json\"); // Assuming the file is in the public folder\n\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n\n        // Access the ReadableStream and convert it to text\n        const stream = response.body;\n        const reader = stream.getReader();\n        let result = \"\";\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          result += new TextDecoder().decode(value);\n        }\n        const jsonData = JSON.parse(result);\n        setData(jsonData);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"wine\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n};\n_s(WineStats, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = WineStats;\nexport default WineStats;\nvar _c;\n$RefreshReg$(_c, \"WineStats\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WineStats","_s","data","setData","fetchData","response","fetch","ok","Error","stream","body","reader","getReader","result","done","value","read","TextDecoder","decode","jsonData","JSON","parse","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rahul/Desktop/manufac-assignment/src/components/wine.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst WineStats = () => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch(\"/data.json\"); // Assuming the file is in the public folder\n\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n\n        // Access the ReadableStream and convert it to text\n        const stream = response.body;\n        const reader = stream.getReader();\n        let result = \"\";\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n          result += new TextDecoder().decode(value);\n        }\n\n        const jsonData = JSON.parse(result);\n        setData(jsonData);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n\n    fetchData();\n  }, []);\n  return <div>wine</div>;\n};\n\nexport default WineStats;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpCC,SAAS,CAAC,MAAM;IACd,eAAeO,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;;QAE5C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;;QAEA;QACA,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,IAAI;QAC5B,MAAMC,MAAM,GAAGF,MAAM,CAACG,SAAS,CAAC,CAAC;QACjC,IAAIC,MAAM,GAAG,EAAE;QACf,OAAO,IAAI,EAAE;UACX,MAAM;YAAEC,IAAI;YAAEC;UAAM,CAAC,GAAG,MAAMJ,MAAM,CAACK,IAAI,CAAC,CAAC;UAC3C,IAAIF,IAAI,EAAE;UACVD,MAAM,IAAI,IAAII,WAAW,CAAC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;QAC3C;QAEA,MAAMI,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACR,MAAM,CAAC;QACnCV,OAAO,CAACgB,QAAQ,CAAC;MACnB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;IAEAlB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACN,oBAAOL,OAAA;IAAAyB,QAAA,EAAK;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AACxB,CAAC;AAAC3B,EAAA,CA/BID,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAiCf,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}