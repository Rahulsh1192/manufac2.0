{"ast":null,"code":"export const helpers = {\n  calculateMean,\n  calculateMedian,\n  calculateMode\n};\nfunction calculateMean(arr) {\n  const sum = arr.reduce((total, item) => {\n    var _ref;\n    return (_ref = total + (item === null || item === void 0 ? void 0 : item.Flavanoids)) !== null && _ref !== void 0 ? _ref : 0;\n  }, 0);\n  return parseFloat((sum / arr.length).toFixed(3));\n}\nfunction calculateMedian(arr) {\n  const sorted = arr.map(item => item.Flavanoids).sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  } else {\n    return sorted[middle];\n  }\n}\nfunction calculateMode(arr) {\n  const counts = {};\n  let mode = [];\n  let maxCount = 0;\n  arr.forEach(item => {\n    const value = item.Flavanoids;\n    counts[value] = (counts[value] || 0) + 1;\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      mode = [value];\n    } else if (counts[value] === maxCount) {\n      mode.push(value);\n    }\n  });\n  console.log(counts);\n  return mode;\n}","map":{"version":3,"names":["helpers","calculateMean","calculateMedian","calculateMode","arr","sum","reduce","total","item","_ref","Flavanoids","parseFloat","length","toFixed","sorted","map","sort","a","b","middle","Math","floor","counts","mode","maxCount","forEach","value","push","console","log"],"sources":["/home/rahul/Desktop/manufac-assignment/src/utils/helper.js"],"sourcesContent":["export const helpers = {\n  calculateMean,\n  calculateMedian,\n  calculateMode,\n};\n\nfunction calculateMean(arr) {\n  const sum = arr.reduce((total, item) => total + item?.Flavanoids ?? 0, 0);\n  return parseFloat((sum / arr.length).toFixed(3));\n}\n\nfunction calculateMedian(arr) {\n  const sorted = arr.map((item) => item.Flavanoids).sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  } else {\n    return sorted[middle];\n  }\n}\n\nfunction calculateMode(arr) {\n  const counts = {};\n  let mode = [];\n  let maxCount = 0;\n\n  arr.forEach((item) => {\n    const value = item.Flavanoids;\n    counts[value] = (counts[value] || 0) + 1;\n\n    if (counts[value] > maxCount) {\n      maxCount = counts[value];\n      mode = [value];\n    } else if (counts[value] === maxCount) {\n      mode.push(value);\n    }\n  });\n  console.log(counts);\n  return mode;\n}\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;EACrBC,aAAa;EACbC,eAAe;EACfC;AACF,CAAC;AAED,SAASF,aAAaA,CAACG,GAAG,EAAE;EAC1B,MAAMC,GAAG,GAAGD,GAAG,CAACE,MAAM,CAAC,CAACC,KAAK,EAAEC,IAAI;IAAA,IAAAC,IAAA;IAAA,QAAAA,IAAA,GAAKF,KAAK,IAAGC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,UAAU,eAAAD,IAAA,cAAAA,IAAA,GAAI,CAAC;EAAA,GAAE,CAAC,CAAC;EACzE,OAAOE,UAAU,CAAC,CAACN,GAAG,GAAGD,GAAG,CAACQ,MAAM,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;AAClD;AAEA,SAASX,eAAeA,CAACE,GAAG,EAAE;EAC5B,MAAMU,MAAM,GAAGV,GAAG,CAACW,GAAG,CAAEP,IAAI,IAAKA,IAAI,CAACE,UAAU,CAAC,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;EACvE,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACP,MAAM,CAACF,MAAM,GAAG,CAAC,CAAC;EAE5C,IAAIE,MAAM,CAACF,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC3B,OAAO,CAACE,MAAM,CAACK,MAAM,GAAG,CAAC,CAAC,GAAGL,MAAM,CAACK,MAAM,CAAC,IAAI,CAAC;EAClD,CAAC,MAAM;IACL,OAAOL,MAAM,CAACK,MAAM,CAAC;EACvB;AACF;AAEA,SAAShB,aAAaA,CAACC,GAAG,EAAE;EAC1B,MAAMkB,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIC,QAAQ,GAAG,CAAC;EAEhBpB,GAAG,CAACqB,OAAO,CAAEjB,IAAI,IAAK;IACpB,MAAMkB,KAAK,GAAGlB,IAAI,CAACE,UAAU;IAC7BY,MAAM,CAACI,KAAK,CAAC,GAAG,CAACJ,MAAM,CAACI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IAExC,IAAIJ,MAAM,CAACI,KAAK,CAAC,GAAGF,QAAQ,EAAE;MAC5BA,QAAQ,GAAGF,MAAM,CAACI,KAAK,CAAC;MACxBH,IAAI,GAAG,CAACG,KAAK,CAAC;IAChB,CAAC,MAAM,IAAIJ,MAAM,CAACI,KAAK,CAAC,KAAKF,QAAQ,EAAE;MACrCD,IAAI,CAACI,IAAI,CAACD,KAAK,CAAC;IAClB;EACF,CAAC,CAAC;EACFE,OAAO,CAACC,GAAG,CAACP,MAAM,CAAC;EACnB,OAAOC,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}